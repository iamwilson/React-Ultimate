Basics
====================
Props - done
State - done
Redux - done
Events - done
Routing - done
Services - done
ReactDOM - done
Keys & refs - done
Passing data between components - done
Passing arguments to Event handlers - done
Passing functions to child component - done
Controlled & uncontrolled components - done
Stateful (class) & stateless (function) - done
Lifecycle methods (constructor, render, componentDidMount) - done
Normal Class component vs Pure Component vs Stateless component - done 

React Fragments -
Swagger - 
Container x Presenter paradigm - 
Code splitting - 
Testing - 
Deployment - 

PWA - 
Web worker - 
Redux Persist -
Service worker - 
Named exports - 
Synthetic events -

LESSONS
=========================

state - local state of the component, cannot be accessed & modified outside the component. only be used & modified inside the component
props - make components reusable. gives components ability to receive data from parent component in the form of props
props and state changes - trigger a render update

setState - happens asynchronously

shallowCopy - points to the same location in memory as source
deepCopy - points to a different location in memory, but the contents are the same

controlled Component 
 - takes its current value through props and notifies changes through callbacks like onChange
 - A parent component handles the callback and manages its own state 

uncontrolled Component
 - stores its own state internally
 - you query the DOM using a ref to find its current value.

Stateless component 
    - components which don't have life-cycles
    - Mainly used in rendering repeat elements of parent components such as lists without any actions.

Pure component
    - Have life-cycle and will always return the same result when a specific set of props is given.
    - Mainly used when displaying a list of results or a specific object data which doesn't have 
      complex child elements and used to perform operations which only impact itself. 

Normal components
    - Page level components and consists lot of child components
    - Mainly used as a container for other components

Spread operator always creates new object, Object.assign doesn't unless you pass an object literal{} as first parameter
 
Redux - used to sync state with server
this keyword - in JavaScript, class methods are not bound by default.

Redux Thunk - When an action creator returns a function, that function will get executed by the Redux Thunk middleware
Any time you attempt to dispatch a function instead of an action object, Redux Thunk middleware will call that function 
with dispatch method itself as the first argument.

Interceptors:

1. Add authorization header to each request
2. can be used for caching & logging
3. Global error handling
4. Loading animations
5. Getting a refresh token

React router does partial matching 
    - so /home partially matches  /home/employee.
    - the exact={true} param disables partial matching.
